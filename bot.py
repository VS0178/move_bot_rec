import os
import logging
import pandas as pd
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters, ConversationHandler
)

# Load environment variables
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

RATING, YEAR, POPULARITY = range(3)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
MOVIES_DB_PATH = os.getenv('MOVIES_DB_PATH', 'moviedb.csv')
MAX_OVERVIEW_LENGTH = int(os.getenv('MAX_OVERVIEW_LENGTH', '400'))


def require_data(func):
    async def wrapper(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if self.movies_df is None or self.movies_df.empty:
            text = "‚ö†Ô∏è –ë–∞–∑–∞ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if update.message:
                await update.message.reply_text(text)
            elif update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(text)
            return ConversationHandler.END
        return await func(self, update, context)
    return wrapper


class MovieRecommendationBot:
    def __init__(self):
        self.movies_df = pd.DataFrame()
        self.load_movies()

    def load_movies(self):
        try:
            if not os.path.isfile(MOVIES_DB_PATH):
                raise FileNotFoundError(f"–§–∞–π–ª {MOVIES_DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            df = pd.read_csv(MOVIES_DB_PATH)
            required_cols = {'title', 'overview', 'release_date', 'popularity', 'vote_average', 'vote_count'}
            missing = required_cols - set(df.columns)
            if missing:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
            df['year'] = pd.to_datetime(df['release_date'], errors='coerce').dt.year
            df.dropna(subset=['year'], inplace=True)
            if df.empty:
                raise ValueError("–ü—É—Å—Ç–æ–π DataFrame –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            self.movies_df = df
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(df)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤: {e}")
            raise

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("üé¨ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", callback_data='random')],
            [InlineKeyboardButton("‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data='rating')],
            [InlineKeyboardButton("üìÖ –ü–æ –≥–æ–¥—É", callback_data='year')],
            [InlineKeyboardButton("üî• –ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏", callback_data='popularity')],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –í—ã–±–µ—Ä–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
                reply_markup=reply_markup
            )
        elif update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –í—ã–±–µ—Ä–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
                reply_markup=reply_markup
            )

    async def about(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        text = (
            f"üé¨ <b>Movie Recommendation Bot</b>\n\n"
            f"–í –±–∞–∑–µ {len(self.movies_df)} —Ñ–∏–ª—å–º–æ–≤.\n"
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n- –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä\n- –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É (IMDb)\n- –ü–æ –≥–æ–¥—É\n- –ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')

    @require_data
    async def random_movie(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        movie = self.movies_df.sample(1).iloc[0]
        await self._send_movie_info(query, movie, "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")

    async def choose_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        min_rating = round(self.movies_df['vote_average'].min(), 1)
        max_rating = round(self.movies_df['vote_average'].max(), 1)
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ ({min_rating} - {max_rating}):\n–ü—Ä–∏–º–µ—Ä: <code>7.5</code>",
            parse_mode='HTML'
        )
        return RATING

    async def process_rating(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            rating = float(update.message.text)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 7.5")
            return RATING

        min_rating = self.movies_df['vote_average'].min()
        max_rating = self.movies_df['vote_average'].max()
        if not (min_rating <= rating <= max_rating):
            await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {min_rating:.1f} –¥–æ {max_rating:.1f}")
            return RATING

        filtered = self.movies_df[self.movies_df['vote_average'] >= rating]
        if filtered.empty:
            await update.message.reply_text("–§–∏–ª—å–º–æ–≤ —Å —Ç–∞–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return RATING

        movie = filtered.sample(1).iloc[0]
        await self._send_movie_info(update, movie, f"üé¨ –§–∏–ª—å–º—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º {rating:.1f}+")
        return ConversationHandler.END

    async def choose_year(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020):")
        return YEAR

    async def process_year(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            year = int(update.message.text)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020)")
            return YEAR

        filtered = self.movies_df[self.movies_df['year'] == year]
        if filtered.empty:
            await update.message.reply_text(f"–§–∏–ª—å–º–æ–≤ –∑–∞ {year} –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return YEAR

        movie = filtered.sample(1).iloc[0]
        await self._send_movie_info(update, movie, f"üé¨ –§–∏–ª—å–º—ã –∑–∞ {year} –≥–æ–¥:")
        return ConversationHandler.END

    async def choose_popularity(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏:")
        return POPULARITY

    async def process_popularity(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            popularity = float(update.message.text)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏.")
            return POPULARITY

        filtered = self.movies_df[self.movies_df['popularity'] >= popularity]
        if filtered.empty:
            await update.message.reply_text(f"–§–∏–ª—å–º–æ–≤ —Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é –æ—Ç {popularity} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return POPULARITY

        movie = filtered.sample(1).iloc[0]
        await self._send_movie_info(update, movie, f"üé¨ –§–∏–ª—å–º—ã —Å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é –æ—Ç {popularity}:")
        return ConversationHandler.END

    async def _send_movie_info(self, update_obj, movie, prefix=""):
        text = (
            f"{prefix}\n\n"
            f"<b>{movie['title']}</b> ({int(movie['year'])})\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{movie['vote_average']}</b>/10 (–≥–æ–ª–æ—Å–æ–≤: {movie['vote_count']})\n"
            f"üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: <b>{movie['popularity']:.1f}</b>\n\n"
        )
        overview = movie['overview']
        if len(overview) > MAX_OVERVIEW_LENGTH:
            overview = overview[:MAX_OVERVIEW_LENGTH] + "..."
        text += f"üìù <i>{overview}</i>"

        poster = movie.get('poster_path')
        if pd.notna(poster) and isinstance(poster, str):
            text += f"\n\n<a href='https://image.tmdb.org/t/p/w500{poster}'>üéû –ü–æ—Å—Ç–µ—Ä</a>"

        keyboard = [
            [InlineKeyboardButton("üîÅ –ï—â–µ –æ–¥–∏–Ω", callback_data='random')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        markup = InlineKeyboardMarkup(keyboard)

        if hasattr(update_obj, 'message') and update_obj.message:
            await update_obj.message.reply_text(text, reply_markup=markup, parse_mode='HTML', disable_web_page_preview=False)
        else:
            await update_obj.edit_message_text(text, reply_markup=markup, parse_mode='HTML', disable_web_page_preview=False)

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
        return ConversationHandler.END

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
        if update and hasattr(update, 'effective_message') and update.effective_message:
            await update.effective_message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def main():
    if not BOT_TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        return

    bot = MovieRecommendationBot()

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler('start', bot.start))
    application.add_handler(CallbackQueryHandler(bot.random_movie, pattern='^random$'))
    application.add_handler(CallbackQueryHandler(bot.about, pattern='^about$'))
    application.add_handler(CallbackQueryHandler(bot.start, pattern='^back$'))

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(bot.choose_rating, pattern='^rating$'),
            CallbackQueryHandler(bot.choose_year, pattern='^year$'),
            CallbackQueryHandler(bot.choose_popularity, pattern='^popularity$')
        ],
        states={
            RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_rating)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_year)],
            POPULARITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_popularity)],
        },
        fallbacks=[CommandHandler('cancel', bot.cancel)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    application.add_error_handler(bot.error_handler)

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()


if __name__ == '__main__':
    main()
